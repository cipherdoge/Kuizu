{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'UserRegister',\n  data() {\n    return {\n      formData: {\n        username: '',\n        password: '',\n        dob: '',\n        qualification: ''\n      },\n      error: null,\n      showPopup: false // State to show or hide the popup\n    };\n  },\n  methods: {\n    async register() {\n      try {\n        // Format date to DD/MM/YYYY\n        const dateObj = new Date(this.formData.dob);\n        const formattedDate = `${String(dateObj.getDate()).padStart(2, '0')}/${String(dateObj.getMonth() + 1).padStart(2, '0')}/${dateObj.getFullYear()}`;\n        const response = await axios.post('api/register', {\n          username: this.formData.username,\n          password: this.formData.password,\n          is_admin: false,\n          dob: formattedDate,\n          qualification: this.formData.qualification\n        });\n        if (response.status === 201) {\n          this.showPopup = true; // Show the popup on successful registration\n        }\n      } catch (err) {\n        this.error = err.response?.data?.error || 'Registration failed';\n      }\n    },\n    closePopup() {\n      this.showPopup = false; // Hide the popup\n      this.$router.push('/login'); // Redirect to login after closing the popup\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","formData","username","password","dob","qualification","error","showPopup","methods","register","dateObj","Date","formattedDate","String","getDate","padStart","getMonth","getFullYear","response","post","is_admin","status","err","closePopup","$router","push"],"sources":["/home/ritvik/quiz_master_v2/Kuizu/frontend/src/components/UserRegister.vue"],"sourcesContent":["<template>\n    <div class=\"register-container\">\n      <h2>User Registration</h2>\n      <form @submit.prevent=\"register\" class=\"register-form\">\n        <div class=\"form-group\">\n          <label for=\"username\">Username:</label>\n          <input \n            type=\"text\"\n            id=\"username\"\n            v-model=\"formData.username\"\n            required\n          >\n        </div>\n  \n        <div class=\"form-group\">\n          <label for=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            v-model=\"formData.password\"\n            required\n          >\n        </div>\n  \n        <div class=\"form-group\">\n          <label for=\"dob\">Date of Birth:</label>\n          <input\n            type=\"date\"\n            id=\"dob\"\n            v-model=\"formData.dob\"\n            required\n          >\n        </div>\n  \n        <div class=\"form-group\">\n          <label for=\"qualification\">Qualification:</label>\n          <input\n            type=\"text\"\n            id=\"qualification\"\n            v-model=\"formData.qualification\"\n            required\n          >\n        </div>\n  \n        <button type=\"submit\">Register</button>\n      </form>\n  \n      <div v-if=\"error\" class=\"error\">\n        {{ error }}\n      </div>\n  \n      <!-- Popup for successful registration -->\n      <div v-if=\"showPopup\" class=\"popup-overlay\">\n        <div class=\"popup\">\n          <p>Registration Successful!</p>\n          <button @click=\"closePopup\">OK</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'UserRegister',\n    data() {\n      return {\n        formData: {\n          username: '',\n          password: '',\n          dob: '',\n          qualification: '',\n        },\n        error: null,\n        showPopup: false, // State to show or hide the popup\n      };\n    },\n    methods: {\n      async register() {\n        try {\n          // Format date to DD/MM/YYYY\n          const dateObj = new Date(this.formData.dob);\n          const formattedDate = `${String(dateObj.getDate()).padStart(2, '0')}/${String(\n            dateObj.getMonth() + 1\n          ).padStart(2, '0')}/${dateObj.getFullYear()}`;\n  \n          const response = await axios.post('api/register', {\n            username: this.formData.username,\n            password: this.formData.password,\n            is_admin: false,\n            dob: formattedDate,\n            qualification: this.formData.qualification,\n          });\n  \n          if (response.status === 201) {\n            this.showPopup = true; // Show the popup on successful registration\n          }\n        } catch (err) {\n          this.error = err.response?.data?.error || 'Registration failed';\n        }\n      },\n      closePopup() {\n        this.showPopup = false; // Hide the popup\n        this.$router.push('/login'); // Redirect to login after closing the popup\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .register-container {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  .register-form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n  \n  .form-group {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n  }\n  \n  input {\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  \n  button {\n    padding: 10px;\n    background-color: #34495e;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:hover {\n    background-color: #2c3e50;\n  }\n  \n  .error {\n    color: red;\n    margin-top: 10px;\n    text-align: center;\n  }\n  \n  /* Popup styling */\n  .popup-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .popup {\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    text-align: center;\n  }\n  \n  .popup p {\n    font-size: 1.2rem;\n    margin-bottom: 15px;\n  }\n  \n  .popup button {\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .popup button:hover {\n    background-color: #0056b3;\n  }\n  </style>\n  "],"mappings":";AA8DE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,GAAG,EAAE,EAAE;QACPC,aAAa,EAAE;MACjB,CAAC;MACDC,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,KAAK,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI;QACF;QACA,MAAMC,OAAM,GAAI,IAAIC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACG,GAAG,CAAC;QAC3C,MAAMQ,aAAY,GAAI,GAAGC,MAAM,CAACH,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAC3EH,OAAO,CAACM,QAAQ,CAAC,IAAI,CACvB,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIL,OAAO,CAACO,WAAW,CAAC,CAAC,EAAE;QAE7C,MAAMC,QAAO,GAAI,MAAMpB,KAAK,CAACqB,IAAI,CAAC,cAAc,EAAE;UAChDjB,QAAQ,EAAE,IAAI,CAACD,QAAQ,CAACC,QAAQ;UAChCC,QAAQ,EAAE,IAAI,CAACF,QAAQ,CAACE,QAAQ;UAChCiB,QAAQ,EAAE,KAAK;UACfhB,GAAG,EAAEQ,aAAa;UAClBP,aAAa,EAAE,IAAI,CAACJ,QAAQ,CAACI;QAC/B,CAAC,CAAC;QAEF,IAAIa,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACd,SAAQ,GAAI,IAAI,EAAE;QACzB;MACF,EAAE,OAAOe,GAAG,EAAE;QACZ,IAAI,CAAChB,KAAI,GAAIgB,GAAG,CAACJ,QAAQ,EAAElB,IAAI,EAAEM,KAAI,IAAK,qBAAqB;MACjE;IACF,CAAC;IACDiB,UAAUA,CAAA,EAAG;MACX,IAAI,CAAChB,SAAQ,GAAI,KAAK,EAAE;MACxB,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}